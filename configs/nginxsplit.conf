worker_processes  1;
error_log  logs/error.log  info;

# this makes valgrind/gdb easier
# daemon off;
# # if debugging is needed - we get a core in /tmp/cores
# and then: sudo gdb ~/code/nginx/objs/nginx /tmp/cores/core
# for a backtrace
# error_log  logs/error.log  debug;
# working_directory  /tmp/cores/;
# worker_rlimit_core 500M;

events {
    worker_connections  1024;
}

http {
    log_format withech '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$ech_status"';
    access_log          $RUNTOP/nginx/logs/access.log withech;
    ssl_echkeydir $RUNTOP/echkeydir;
    # default server
    server {
        listen              9442 default_server ssl;
        http2 on;
        ssl_certificate     $RUNTOP/cadir/example.com.crt;
        ssl_certificate_key $RUNTOP/cadir/example.com.priv;
        ssl_protocols       TLSv1.3;
        server_name         example.com;
        location / {
            root   dir-example.com;
            index  index.html index.htm;
        }
    }
    # ECH-front
    server {
        server_name foo.example.com;
        listen     7443 ssl;
        http2 on;
        ssl_certificate     $RUNTOP/cadir/foo.example.com.crt;
        ssl_certificate_key $RUNTOP/cadir/foo.example.com.priv;
        ssl_protocols       TLSv1.3;
        location / {
            proxy_pass http://127.0.0.1:3480/;
        }
    }
    server {
        server_name example.com;
        listen     7443 ssl;
        http2 on;
        ssl_certificate     $RUNTOP/cadir/example.com.crt;
        ssl_certificate_key $RUNTOP/cadir/example.com.priv;
        ssl_protocols       TLSv1.3;
        location / {
            proxy_pass http://127.0.0.1:3485/;
        }
    }
    # Two-TLS
    server {
        server_name foo.example.com;
        listen     7444 ssl;
        http2 on;
        ssl_certificate     $RUNTOP/cadir/example.com.crt;
        ssl_certificate_key $RUNTOP/cadir/example.com.priv;
        ssl_protocols       TLSv1.3;
        location / {
            proxy_pass https://127.0.0.1:3481/;
        }
    }
    server {
        server_name example.com;
        listen     7444 ssl;
        http2 on;
        ssl_certificate     $RUNTOP/cadir/example.com.crt;
        ssl_certificate_key $RUNTOP/cadir/example.com.priv;
        ssl_protocols       TLSv1.3;
        location / {
            proxy_pass https://127.0.0.1:3485/;
        }
    }
}

stream {
    map $ssl_preread_server_name $targetBackend {
        foo.example.com  127.0.0.1:3484; # running in lighttpd usually
        example.com  127.0.0.1:3485;
    }
    log_format basic '$ssl_preread_server_name ' 
                 '$ssl_preread_alpn_protocols '
                 '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time "$upstream_addr" '
                 '"$upstream_bytes_sent" "$upstream_bytes_received"';
    access_log logs/fe_access.log basic;
    ssl_preread on;
    ssl_echkeydir $RUNTOP/echkeydir;
    # One-TLS
    server {
        listen              7445;
        proxy_pass $targetBackend;
    }

    # Split-mode
    server {
        listen              7446;
        proxy_pass $targetBackend;
    }
}
