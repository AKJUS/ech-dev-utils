# Basic config mapping a listening IP:port to another host's IP:port with
# support for HTTP/1 and 2.

global
   strict-limits  # refuse to start if insufficient FDs/memory
   stats socket /tmp/haproxy.sock mode 600 level admin
   stats timeout 2m
   log 127.0.0.1:514 local0 info
   pidfile haproxy/logs/haproxy.pid
   # helps with debugging (a bit:-)
   nbthread 1

defaults
   mode http
   log global
   option httplog
   balance random      # power-of-two-choices
   timeout client 60s
   timeout server 60s
   timeout connect 1s

frontend ECH-front
    capture request header user-agent len 100
    capture request header host len 100
    log-format "${HAPROXY_HTTP_LOG_FMT} SSL:%sslc, %sslv, ECH:%sslech"
    bind :7443 ech echkeydir ssl crt cadir/foo.example.com.pem
    use_backend 3480 if { ssl_fc_sni foo.example.com }
    default_backend 3485 # example.com backend for public_name
backend 3480
    # set a cookie so we know haproxy was there
    cookie SERVERUSED insert indirect nocache
    server s1 127.0.3.4:3480

frontend Two-TLS
    bind :7444 ech echkeydir ssl crt cadir/foo.example.com.pem
    use_backend 3481 if { ssl_fc_sni foo.example.com }
    default_backend 3485 # example.com backend for public_name
backend 3481
    # set a cookie so we know haproxy was there
    cookie SERVERUSED insert indirect nocache
    server s2 127.0.3.4:3481 ssl ca-file cadir/oe.csr 

frontend One-TLS
    mode tcp
    option tcplog
    log-format "SSL:%sslc, %sslv, ECH:%sslech"
    bind :7445
    use_backend 3482
backend 3482
    mode tcp
    option ssl-hello-chk
    # next 2 lines seem to be needed to get switching on (outer) SNI to
    # work, not sure why
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    use-server s3 if { req_ssl_sni -i example.com }
    server s3 127.0.3.4:3482 
    server default 127.0.3.4:3485

frontend Split-mode
    mode tcp
    option tcplog
    # log-format "SSL:%sslc, %sslv, ECH:%sslech"
    bind :7446 
    use_backend 3484
backend 3484
    mode tcp
    # next 2 lines seem to be needed to get switching on (outer) SNI to
    # work, not sure why
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    tcp-request ech-decrypt echkeydir
    use-server foo if { req.ssl_sni -i foo.example.com }
    server foo 127.0.3.4:3484  check
    server default 127.0.3.4:3485

backend 3485
    server default 127.0.3.4:3485 check

